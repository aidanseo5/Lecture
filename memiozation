// memioze fibonacci


function mfib(n) {

    const mem = [];
    function fib(k) {

    if (mem[k] !== undefined) {
        return mem[k]; 
    } else { 
    const result =k <= 1 ? k : fib(k - 1) + fib(k - 2);
    mem[k] = result;
    return result;
    }
}
return fib(n);
}
// Abstract
function memoize(f) {
const mem = [];
function mf(x) {
if (mem[x] !== undefined) {
return mem[x];
} else {
const result = f(x);
mem[x] = result;
return result;
}
}
return mf;
} 
// tribonaci 
const mtrib =
memoize(n => n === 0 ? 0
: n === 1 ? 1
: n === 2 ? 1
: mtrib(n - 1) +
mtrib(n - 2) +
mtrib(n - 3));

// 2D 
const mem = [];
function read(n, k) {
return mem[n] === undefined
? undefined
: mem[n][k];
}
function write(n, k, value) {
if (mem[n] === undefined) {
mem[n] = [];
}
mem[n][k] = value;

