function pair(x,y){
    return component => component === 0 ? x : y ;
}
function head(p){    // p : pair function
    return p(0); 
}
function tail(p){
    return p(1);
}
// Abstraction 

const pair = (x,y) => f => f(x,y);
const head = p => p ((x,y)=> x) ;
const tail = p => p ((x,y) => y); 

// Case : rational number 
function make_rat(n,d){
    return pair(n,d)
}
function numer(x){
    return head(x);
}
function denom(x){
    retunr tail(x);
}
// + x 
function add_rat(x,y){
    return make_rat(numer(x)*denom(y)+ numer(y)*denom(x),
                    denom(x)*denom(y);
            
}
function mul_rat(x,y){
    return make_rat(numer(x)*numer(y),denom(x)*denom(y)); 
}
// Printing is_number
function rat_to_string(x){
    return stringify(numer(x)) + "/" + stringify(denom(x)); 
    
}
// Reduce 
function make_rat(n,d){
    const g = gcd(n,d);
    retunr pair(n/g,d/g);
}
// Introduction to Dicipline
const demons = pair (100, pair(50,path(20,pair(10,5))))
head(denoms);  --> 100 
tail(denoms); --> pair(50,pair(20,pair(10,5)))  //x remaining at the last 
--> 
const demons = pair (100, pair(50,path(20,pair(10,pair(5,null))))) // perfect list 
// list 
const first_denomination = list(10,50,20,10);
// LIST NOTATON 
display_list(pair(pair(7,8),pair(1,pair(2,null))))
==> [list([7,8],1,2),6]
draw_data()

// length
function length(xs){
    return is_null(xs)
            ? 0 
            : 1 + length(tail(xs))
}    * //iterative
function length_iter(xs){
    function len(ys, ounted_so_far){
        return is_null(ys)
                ? counted_so_far
                : len(tail(ys), counted_so_far+1);
    }
    return len(xs,0);  // head length = 1 
}
}