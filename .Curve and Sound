import {rotate_around_origin, translate, x_of, y_of, make_point, draw_connected, draw_connected_full_view_proportional} from "curve";

function unit_circle(t){
    return make_point(math_cos(2*math_PI*t)
                      , math_sin(2*math_PI*t));
}
function unit_line_at2(y){
    return t => make_point(t,y);
}

const unit_line = unit_line_at2(0);

function unit_line_at(t){
    return  make_point(t,t);
}   // < ----   t 는 자동으로 [0,1] 적용하는 함수 , 
    //point만 만들어도 functio 비슷함, 대신  (t) apply할떄 안함

//draw_connected_full_view_proportional(8)(unit_circle)
//  --->  8각형 


//Spiral 
function spiral_one(t){
    const p = unit_circle(t);
    return make_point(t*x_of(p), t*y_of(p));
}

// Spiral Curve 

function spiral(rev){
    return t=> { const p = unit_circle((t*rev)%1);
                return make_point(t*x_of(p), t* y_of(p)); };
                
}
// Transformation
const rot_line= rotate_around_origin(0,0,math_PI/6)(unit_line);
const shifted_rot_line = translate(0,0.25,0)(rot_line);

function compose (f,g){ 
 return f(g(x));
}  
const shift_rot = compose (translate(0,0.25,0),rotate_around_origin(0,0, math_PI/6));
const shifted_rot_line = shift_rot(unit_line);
//draw_connected(200)(shifted_rot_line);

// Connecting Curve
function connect_rigidly (curve1, curve2){
    return t=> t<1/2 
            ? curve1(2*t)
            : curve2(2*t-1);
}
const result_curve = connect_rigidly(arc, translate(1,0,0)(arc));
draw_connected_full_view_proportional(200)(result_curve);

// 3D result_curve

function colorful_3D_spiral(rev){
    return t => {
           const p = unit_circle((t*rev) %1);
           const R = math_max(0,1-2*t) *255;
           const G = (1- math_abs(1-2*t))*225;
           const B = math_max(0,2*t-1)*255;
           return make_3D_color_point(t*x_of(p),t*y_of(p),2*t,R,G,B);
          // make_color_point(x, y, R,G,B)
    };
}
// Sound 
const doremi_wave = t => t < 0.5
                        ? math_sin(2*math_PI*261.63*t)
                        : t <1/0 
         }               // .. 등등

















